// ============================================
// MIXINS
// Reusable style patterns and utilities
// Demonstrates: @mixin, @include, @content, parameters, conditionals
// ============================================

@use 'sass:color';

@use 'sass:map';
@use 'sass:list';
@use 'variables' as *;

// --------------------------------------------
// Flexbox utilities
// Usage: @include flex-center;
// --------------------------------------------
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex($direction: row, $align: stretch, $justify: flex-start, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
  justify-content: $justify;
  flex-wrap: $wrap;
}

// --------------------------------------------
// Responsive breakpoints
// Usage: @include respond-to(md) { ... }
// --------------------------------------------
@mixin respond-to($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found in $breakpoints map!";
  }
}

// Max-width version
@mixin respond-to-max($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $bp-value: map.get($breakpoints, $breakpoint);
    @media (max-width: calc(#{$bp-value} - 1px)) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found in $breakpoints map!";
  }
}

// Between breakpoints
@mixin respond-between($min-breakpoint, $max-breakpoint) {
  @if map.has-key($breakpoints, $min-breakpoint) and map.has-key($breakpoints, $max-breakpoint) {
    $min-bp: map.get($breakpoints, $min-breakpoint);
    $max-bp: map.get($breakpoints, $max-breakpoint);
    @media (min-width: #{$min-bp}) and (max-width: calc(#{$max-bp} - 1px)) {
      @content;
    }
  }
}

// --------------------------------------------
// Button variants
// Usage: @include button-variant(primary);
// --------------------------------------------
@mixin button-base {
  display: inline-block;
  padding: $spacing-sm $spacing-lg;
  border: none;
  border-radius: map.get($border-radius, sm);
  font-family: $font-family-main;
  font-size: map.get($font-sizes, base);
  font-weight: $font-weight-medium;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  transition: all $transition-base;
  user-select: none;
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-variant($color) {
  @include button-base;
  background: $color;
  color: #fff;
  
  &:hover:not(:disabled) {
    background: color.adjust($color, $lightness: -10%);
    transform: translateY(-2px);
    box-shadow: $shadow-md;
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
  }
}

@mixin button-outline($color) {
  @include button-base;
  background: transparent;
  color: $color;
  border: 2px solid $color;
  
  &:hover:not(:disabled) {
    background: $color;
    color: #fff;
  }
}

// --------------------------------------------
// Card component
// Usage: @include card;
// --------------------------------------------
@mixin card($padding: $spacing-lg, $shadow: $shadow-md) {
  background: $bg-card;
  padding: $padding;
  border-radius: map.get($border-radius, md);
  box-shadow: $shadow;
}

// --------------------------------------------
// Truncate text with ellipsis
// Usage: @include truncate;
// --------------------------------------------
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// --------------------------------------------
// Pseudo element setup
// Usage: @include pseudo;
// --------------------------------------------
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

// --------------------------------------------
// Aspect ratio box
// Usage: @include aspect-ratio(16, 9);
// --------------------------------------------
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: percentage(calc($height / $width));
  }
}

// --------------------------------------------
// Smooth scroll
// --------------------------------------------
@mixin smooth-scroll {
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
}

// --------------------------------------------
// Hide element (accessibility-friendly)
// Usage: @include visually-hidden;
// --------------------------------------------
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// --------------------------------------------
// Reset list styles
// --------------------------------------------
@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

// --------------------------------------------
// Hover lift effect
// --------------------------------------------
@mixin hover-lift($translate: -4px, $shadow: $shadow-lg) {
  transition: all $transition-base;
  
  &:hover {
    transform: translateY($translate);
    box-shadow: $shadow;
  }
}

// --------------------------------------------
// Focus ring for accessibility
// --------------------------------------------
@mixin focus-ring($color: $primary-color, $offset: 2px) {
  outline: 2px solid $color;
  outline-offset: $offset;
}

@mixin focus-visible {
  &:focus-visible {
    @include focus-ring;
  }
}

// --------------------------------------------
// Grid system
// Usage: @include grid(3, 1rem);
// --------------------------------------------
@mixin grid($columns: 3, $gap: $spacing-md) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// --------------------------------------------
// Gradient text
// --------------------------------------------
@mixin gradient-text($gradient) {
  background: $gradient;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

// --------------------------------------------
// Dark mode support
// Usage: @include dark-mode { color: white; }
// --------------------------------------------
@mixin dark-mode {
  @media (prefers-color-scheme: dark) {
    @content;
  }
  
  @at-root [data-theme="dark"] & {
    @content;
  }
}
