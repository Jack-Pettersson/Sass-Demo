// ============================================
// MAIN STYLES
// Main Sass file that imports all partials
// Demonstrates: 7-1 Architecture Pattern, @use, @forward, file organization
// ============================================

// ============================================
// 1. ABSTRACTS
// Variables, functions, mixins, and placeholders
// These don't output CSS themselves
// ============================================
@use 'sass:map';
@use 'sass:color';
@use 'abstracts/variables' as *;
@use 'abstracts/functions' as *;
@use 'abstracts/mixins' as *;
@use 'abstracts/placeholders';

// ============================================
// 2. BASE
// Reset/normalize and base typography
// Foundation styles for the entire project
// ============================================
@use 'base/reset';
@use 'base/typography';

// ============================================
// 3. LAYOUT
// Layout components (header, navigation, container)
// Major structural components of the page
// ============================================
@use 'layout/header';
@use 'layout/navigation';
@use 'layout/container';

// ============================================
// 4. COMPONENTS
// Reusable UI components (buttons, cards, forms)
// Small, reusable pieces of the UI
// ============================================
@use 'components/buttons';
@use 'components/cards';
@use 'components/forms';

// ============================================
// 5. CUSTOM CONTENT STYLES
// Specific styles for demo content
// ============================================

// Article content
article {
  margin: $spacing-xl 0;
  
  p {
    font-size: font-size(lg);
    line-height: 1.8;
    margin-bottom: $spacing-lg;
  }
}

// ============================================
// 6. DARK MODE SUPPORT
// Demonstrates: Dark mode theming
// ============================================

// System preference for dark mode
@media (prefers-color-scheme: dark) {
  body:not([data-theme="light"]) {
    background-color: map.get($dark-mode, bg-body);
    color: map.get($dark-mode, text-primary);
    
    h1, h2, h3, h4, h5, h6 {
      color: map.get($dark-mode, text-primary);
    }
    
    p, li, span, div {
      color: map.get($dark-mode, text-primary);
    }
    
    a {
      color: color.adjust($primary-color, $lightness: 15%);
      
      &:hover {
        color: color.adjust($primary-color, $lightness: 25%);
      }
    }
  }
  
  body:not([data-theme="light"]) .text-muted {
    color: map.get($dark-mode, text-secondary);
  }
  
  body:not([data-theme="light"]) .card-text {
    color: map.get($dark-mode, text-primary);
  }
  
  body:not([data-theme="light"]) .content-wrapper,
  body:not([data-theme="light"]) .card {
    background-color: map.get($dark-mode, bg-card);
    color: map.get($dark-mode, text-primary);
  }
  
  body:not([data-theme="light"]) .card-title {
    color: map.get($dark-mode, text-primary);
  }
  
  body:not([data-theme="light"]) .main-menu {
    background-color: map.get($dark-mode, bg-card);
  }
  
  body:not([data-theme="light"]) .main-menu a {
    color: color.adjust($primary-color, $lightness: 15%);
  }
  
  body:not([data-theme="light"]) .form-label {
    color: map.get($dark-mode, text-primary);
  }
  
  body:not([data-theme="light"]) .form-input,
  body:not([data-theme="light"]) .form-select,
  body:not([data-theme="light"]) .form-textarea {
    background-color: map.get($dark-mode, bg-card);
    color: map.get($dark-mode, text-primary);
    border-color: map.get($dark-mode, border);
  }
}

// Manual light mode (overrides everything)
body[data-theme="light"] {
  background-color: $bg-body;
  color: $text-color-primary;
  
  .content-wrapper,
  .card {
    background-color: $bg-card;
    color: $text-color-primary;
  }
  
  .main-menu {
    background-color: #fff;
  }
  
  .form-input,
  .form-select,
  .form-textarea {
    background-color: #fff;
    color: $text-color-primary;
    border-color: $light-color;
  }
}

// Manual dark mode toggle (when data-theme="dark" is set on body)
body[data-theme="dark"] {
  background-color: map.get($dark-mode, bg-body);
  color: map.get($dark-mode, text-primary);
  
  // Typography colors
  h1, h2, h3, h4, h5, h6 {
    color: map.get($dark-mode, text-primary);
  }
  
  p, li, span, div {
    color: map.get($dark-mode, text-primary);
  }
  
  a {
    color: color.adjust($primary-color, $lightness: 15%);
    
    &:hover {
      color: color.adjust($primary-color, $lightness: 25%);
    }
  }
  
  .text-muted {
    color: map.get($dark-mode, text-secondary);
  }
  
  .card-text {
    color: map.get($dark-mode, text-primary);
  }
  
  .content-wrapper,
  .card {
    background-color: map.get($dark-mode, bg-card);
    color: map.get($dark-mode, text-primary);
  }
  
  .card-title {
    color: map.get($dark-mode, text-primary);
  }
  
  .main-menu {
    background-color: map.get($dark-mode, bg-card);
    
    a {
      color: color.adjust($primary-color, $lightness: 15%);
      
      &:hover,
      &.active {
        color: color.adjust($primary-color, $lightness: 25%);
      }
    }
  }
  
  .form-label {
    color: map.get($dark-mode, text-primary);
  }
  
  .form-input,
  .form-select,
  .form-textarea {
    background-color: map.get($dark-mode, bg-card);
    color: map.get($dark-mode, text-primary);
    border-color: map.get($dark-mode, border);
    
    &::placeholder {
      color: map.get($dark-mode, text-secondary);
    }
  }
  
  .alert {
    &-info {
      background-color: rgba($primary-color, 0.2);
      color: color.adjust($primary-color, $lightness: 30%);
      border-color: color.adjust($primary-color, $lightness: 20%);
    }
    
    &-success {
      background-color: rgba($secondary-color, 0.2);
      color: color.adjust($secondary-color, $lightness: 30%);
      border-color: color.adjust($secondary-color, $lightness: 20%);
    }
    
    &-warning {
      background-color: rgba(map.get($colors, warning), 0.2);
      color: color.adjust(map.get($colors, warning), $lightness: 30%);
      border-color: color.adjust(map.get($colors, warning), $lightness: 20%);
    }
    
    &-danger {
      background-color: rgba($accent-color, 0.2);
      color: color.adjust($accent-color, $lightness: 30%);
      border-color: color.adjust($accent-color, $lightness: 20%);
    }
  }
  
  .fancy-quote {
    background: linear-gradient(90deg, rgba($primary-color, 0.15) 0%, rgba($primary-color, 0.05) 100%);
    color: map.get($dark-mode, text-primary);
  }
  
  code {
    background-color: rgba(map.get($dark-mode, bg-card), 0.5);
    color: color.adjust($accent-color, $lightness: 20%);
  }
  
  pre {
    background-color: color.adjust(map.get($dark-mode, bg-card), $lightness: -5%);
    color: map.get($dark-mode, text-primary);
  }
}

// ============================================
// 7. THEME TOGGLE BUTTON
// Custom toggle for dark mode demonstration
// ============================================
.theme-toggle {
  position: fixed;
  bottom: $spacing-xl;
  right: $spacing-xl;
  width: 50px;
  height: 50px;
  border-radius: map.get($border-radius, full);
  background: $primary-color;
  color: white;
  @include flex-center;
  box-shadow: $shadow-lg;
  cursor: pointer;
  transition: all $transition-base;
  z-index: z(fixed);
  border: none;
  font-size: font-size(xl);
  
  &:hover {
    transform: scale(1.1) rotate(15deg);
    box-shadow: $shadow-xl;
  }
  
  &:active {
    transform: scale(0.95);
  }
}

// ============================================
// 8. UTILITY CLASSES
// Additional utility classes not covered in layout
// ============================================

// Divider
.divider {
  width: 100%;
  height: 1px;
  background: linear-gradient(90deg, transparent 0%, $light-color 50%, transparent 100%);
  margin: $spacing-xl 0;
}

// Badge component
.badge {
  display: inline-block;
  padding: $spacing-xs $spacing-sm;
  font-size: font-size(xs);
  font-weight: $font-weight-bold;
  text-transform: uppercase;
  border-radius: map.get($border-radius, sm);
  background: $primary-color;
  color: white;
  
  &-secondary {
    background: $secondary-color;
  }
  
  &-accent {
    background: $accent-color;
  }
}

// Alert component
.alert {
  padding: $spacing-md $spacing-lg;
  border-radius: map.get($border-radius, md);
  margin-bottom: $spacing-md;
  border-left: 4px solid;
  
  &-info {
    background-color: rgba($primary-color, 0.1);
    border-color: $primary-color;
    color: color.adjust($primary-color, $lightness: -20%);
  }
  
  &-success {
    background-color: rgba($secondary-color, 0.1);
    border-color: $secondary-color;
    color: color.adjust($secondary-color, $lightness: -20%);
  }
  
  &-warning {
    background-color: rgba(map.get($colors, warning), 0.1);
    border-color: map.get($colors, warning);
    color: color.adjust(map.get($colors, warning), $lightness: -20%);
  }
  
  &-danger {
    background-color: rgba($accent-color, 0.1);
    border-color: $accent-color;
    color: color.adjust($accent-color, $lightness: -20%);
  }
}

// Loading spinner
.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid $light-color;
  border-top-color: $primary-color;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
  margin: 0 auto;
}

// Animations
@keyframes spin {
  to { transform: rotate(360deg); }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

// Animation utility classes
.fade-in {
  animation: fadeIn 0.6s ease-out;
}

.slide-in {
  animation: slideIn 0.6s ease-out;
}

// ============================================
// NOTES & DOCUMENTATION
// ============================================
// This Sass demo showcases:
// 1. 7-1 Architecture Pattern for organized code structure
// 2. @use and @forward for modern module system
// 3. Variables and Maps for maintainable values
// 4. Functions for calculations and utilities
// 5. Mixins for reusable style patterns
// 6. Placeholder selectors (@extend) for DRY code
// 7. Nesting for readable, organized styles
// 8. Control directives (@each, @if) for dynamic generation
// 9. Built-in modules (sass:math, sass:color, sass:map)
// 10. Responsive design with breakpoint mixins
// 11. Dark mode support
// 12. Component-based architecture
// ============================================